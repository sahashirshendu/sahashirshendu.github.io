[{"content":"Some useful linux commands.\nUpdating the system: Distribution Command Debian, Ubuntu, \u0026hellip; sudo apt update \u0026amp;\u0026amp; sudo apt upgrade Fedora, \u0026hellip; sudo dnf update Arch, Manjaro, \u0026hellip; sudo pacman -Syu KDE Neon sudo pkcon refresh \u0026amp;\u0026amp; sudo pkcon update Installing a package: Distribution Command Debian, Ubuntu, \u0026hellip; sudo apt install packagename Fedora, \u0026hellip; sudo dnf install packagename Arch, Manjaro, \u0026hellip; sudo pacman -S packagename For example, for installing gfortran,\n1 2 3 sudo apt install gfortran # Ubuntu sudo dnf install gfortran # Fedora sudo pacman -S gcc-fortran # Arch File Operations: Command Description mkdir dirname Create a new directory with the provided name, path cd dirname Go to the directory dirname; cd .. to go one level up and so on pwd Print the path of present working directory ls List files in the current directory ls -a List all files in the current directory (i.e., including hidden files) ls -l List files in the current directory in long list format ls -la List all files in the current directory in long list format cp file1 file2 Copy file1 to create file2 mv file1 file2 Move file1 to file2 rm file Delete file (not to Trash, but permanently) wc file Prints the number of lines, words, and characters in file chmod options file Change read, write, and execute permissions on file Summary - Setting up Fortran in Ubuntu: In terminal, run:\n1 2 3 sudo apt update \u0026amp;\u0026amp; sudo apt upgrade sudo apt clean sudo apt install gedit gfortran gnuplot Next create a folder where the files are to be stored and go there,\n1 2 mkdir ~/Fortran cd ~/Fortran Create the fortran file,\n1 gedit file.f # gedit or nano or micro or whatever editor you like Compile and run the file,\n1 2 3 4 5 6 7 # Compile # f77 file.f # for Fortran 77 Files f95 file.f90 # for \u0026gt;= Fortran 90 Files gfortran file.f # generic # Run # ./a.out One can even set up a bash function to compile and execute any fortran file in one shot. To do that insert the following in ~/.bashrc :\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ft () { if [ -x \u0026#34;$(command -v f95)\u0026#34; ]; then if [ -x \u0026#34;$(command -v f77)\u0026#34; ]; then if [ -f $1 ] ; then case $1 in *.f90 | *.f95) f95 $1 \u0026amp;\u0026amp; ./a.out \u0026amp;\u0026amp; rm a.out ;; *.f) f77 $1 \u0026amp;\u0026amp; ./a.out \u0026amp;\u0026amp; rm a.out ;; esac fi else if [ -f $1 ] ; then case $1 in *.f90 | *.f95 | *.f) gfortran $1 \u0026amp;\u0026amp; ./a.out \u0026amp;\u0026amp; rm a.out ;; esac fi fi else echo \u0026#39;Fortran is not installed!\u0026#39; fi } Usage,\n1 ft file.f For more, \u0026hellip; Refer to : Basic UNIX Commands ","permalink":"https://sahashirshendu.github.io/posts/linuxcmdbasic/","summary":"\u003cp\u003eSome useful linux commands.\u003c/p\u003e","title":"Basic Linux Commands"},{"content":"Prerequisites: Python\n","permalink":"https://sahashirshendu.github.io/posts/astrodse/","summary":"\u003cp\u003ePrerequisites: Python\u003c/p\u003e","title":"Astronomy \u0026 Astrophysics Laboratory"},{"content":"Prerequisites: Fortran Compiler (preferably in any *nix distribution) and a text editor, of course :)\nFibonacci Numbers Root Finding Methods Bisection Method Newton Raphson Method Regula Falsi Secant Method Legendre Polynomials Recursion Relation Orthogonality Polynomials Horner\u0026rsquo;s Method Deflation Simultaneous Equations Simultaneous Equations of Two Variables Gauss Elimination (With \u0026amp; Without Pivoting) Gauss Seidel Method ","permalink":"https://sahashirshendu.github.io/posts/mmthree/","summary":"\u003cp\u003ePrerequisites: Fortran Compiler (preferably in any *nix distribution) and a text editor, of course :)\u003c/p\u003e","title":"Mathematical Methods - III Laboratory"},{"content":"Prerequisites: Fortran Compiler (preferably in any *nix distribution) and a text editor, of course :) \u0026amp;/ Python\n","permalink":"https://sahashirshendu.github.io/posts/statmechlab/","summary":"\u003cp\u003ePrerequisites: Fortran Compiler (preferably in any *nix distribution) and a text editor, of course :) \u0026amp;/ Python\u003c/p\u003e","title":"Statistical Mechanics Laboratory"},{"content":"Lorem ipsum dolor sit amet, officia excepteur ex fugiat reprehenderit enim labore culpa sint ad nisi Lorem pariatur mollit ex esse exercitation amet. Nisi anim cupidatat excepteur officia. Reprehenderit nostrud nostrud ipsum Lorem est aliquip amet voluptate voluptate dolor minim nulla est proident. Nostrud officia pariatur ut officia. Sit irure elit esse ea nulla sunt ex occaecat reprehenderit commodo officia dolor Lorem duis laboris cupidatat officia voluptate. Culpa proident adipisicing id nulla nisi laboris ex in Lorem sunt duis officia eiusmod. Aliqua reprehenderit commodo ex non excepteur duis sunt velit enim. Voluptate laboris sint cupidatat ullamco ut ea consectetur et est culpa et culpa duis.\n$$\\left[-\\frac{\\hbar^2}{2m}\\nabla^2+V(\\vec{r})\\right]\\Psi(r,t)=E\\Psi(\\vec{r},t)$$\nContact Me ","permalink":"https://sahashirshendu.github.io/about/","summary":"Lorem ipsum dolor sit amet, officia excepteur ex fugiat reprehenderit enim labore culpa sint ad nisi Lorem pariatur mollit ex esse exercitation amet. Nisi anim cupidatat excepteur officia. Reprehenderit nostrud nostrud ipsum Lorem est aliquip amet voluptate voluptate dolor minim nulla est proident. Nostrud officia pariatur ut officia. Sit irure elit esse ea nulla sunt ex occaecat reprehenderit commodo officia dolor Lorem duis laboris cupidatat officia voluptate. Culpa proident adipisicing id nulla nisi laboris ex in Lorem sunt duis officia eiusmod.","title":"About"},{"content":"Random Stuff\n$$\\left[-\\frac{\\hbar^2}{2m}\\nabla^2+V(\\vec{r})\\right]\\Psi(r,t)=E\\Psi(\\vec{r},t)$$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ## Plotting Prime Spirals in Polar Coordintes import numpy as np import sympy as sp import matplotlib.pyplot as plt # plt.style.use(\u0026#34;dark_background\u0026#34;) def polar(x): return x * np.cos(x), x * np.sin(x) def pspiral(li): li = np.array(list(li)) x, y = polar(li) plt.axis(\u0026#34;off\u0026#34;) plt.scatter(x, y, s=1) plt.axis(\u0026#34;square\u0026#34;) plt.show() # l = int(input(\u0026#34;Number from which you want to plot : \u0026#34;)) l = 0 u = int(input(\u0026#34;Number upto which you want to plot : \u0026#34;)) primes = sp.primerange(l, u) pspiral(primes) ","permalink":"https://sahashirshendu.github.io/posts/firstpost/","summary":"\u003cp\u003eRandom Stuff\u003c/p\u003e","title":"First Post"},{"content":"Using Git and basic command-line tools to back up and sync various code. You can use the setup to store something like a bunch of code files, and copy them to any machine you want and also sync the changes made.\nSetting up the Repository 0. Prerequisites We need to have git installed on our computer and a functional internet connection. Now, there is a point worth noting. The sync works seamlessly only if one has one\u0026rsquo;s git credentials stored or cached [Otherwise you must enter your git username and password for every pull or push command] .\nYou can use the following command(s) to store the credentials. After entering the command, you have to enter the credentials the first time you are prompted, and then those will be stored for future. For permanently storing the credentials,\n1 git config --global credential.helper store For saving the credntials for only one session,\n1 git config --global credential.helper cache [Another thing, GitHub now does not allow you to store the password using the previous command, rather you have to generate a personal access token from the GitHub accounts page and use that. GitLab works fine with passwords.]\n1. Creating the Repository Here we shall use GitHub or GitLab to store our files. We need to create an empty repository in GitHub or GitLab for this purpose. You can create either a public repo or a private one, but for this kind of a project a private repo should be just fine.\n2. Pushing contents in the local folder to the remote repo Now that the remote repo is set up, we have to initiate a git repo in the local folder we want to sync. Open a terminal in the folder and run -\n1 2 3 git init git add . git commit -m \u0026#34;Initial Commit\u0026#34; Next we have to connect the local repo to the remote repo. For that we run -\n1 git remote add origin https://GITHOST/USERNAME/REPONAME.git Note that the https://GITHOST/USERNAME/REPONAME.git part should look something like https://github.com/sahashirshendu/nvimin.git or https://gitlab.com/shirshendusaha/nvimin.git [replace with your own details].\nAnd finally, push the contents -\n1 git push -u origin master In a few seconds, all the contents of our local folder would be available on the remote repo! Now we could just run the few previous commands every time we make any change to the contents of the folder, but that would be tedious, won\u0026rsquo;t it!? So let\u0026rsquo;s automate this by writing a small shell script!\nSyncing the local folder with the Git client The Shell Script Create a shell script (in the folder to be synced) named sync with the text editor of your choice and its contents as follows -\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/bin/bash gstatus=$(git status --porcelain) if [ ${#gstatus} -ne 0 ]; then git pull git add --all printf \u0026#34;Enter Commit Message : \u0026#34; read msg git commit -m \u0026#34;$msg\u0026#34; # git pull --rebase git push fi Now, you should never execute a script from any random site on the web as it could make your computer a pile of e-waste. For this script, the meaning is quite simple - The gstatus variable lists the changes made in the files. If there are not any changes, it does nothing. But if there are, it pulls the changes in the remote repo (if done from another machine), adds all the files to git, prompts you for a commit message, and pushes the changes to the remote repo.\nThen we have to make the script executable. In the terminal, run\n1 chmod +x sync Moment of Truth And whenever you create a new file or change anything, just open the terminal in folder, execute the script, enter and the commit message and \u0026hellip; see the magic!\n1 ./sync Yes, we can automate this workflow with cron-job , but let\u0026rsquo;s just keep it a bit simple for now. Hope someone will find this helpful. :)\n","permalink":"https://sahashirshendu.github.io/posts/backupgit/","summary":"Using Git and basic command-line tools to back up and sync various code. You can use the setup to store something like a bunch of code files, and copy them to any machine you want and also sync the changes made.\nSetting up the Repository 0. Prerequisites We need to have git installed on our computer and a functional internet connection. Now, there is a point worth noting. The sync works seamlessly only if one has one\u0026rsquo;s git credentials stored or cached [Otherwise you must enter your git username and password for every pull or push command] .","title":"How to Back Up Code with a Bit of Git"},{"content":"\u0026quot; XYZ\u0026quot;\nLorem ipsum dolor sit amet, qui minim labore adipisicing minim sint cillum sint consectetur cupidatat. $$\\LaTeX$$\n","permalink":"https://sahashirshendu.github.io/contact/","summary":"\u0026quot; XYZ\u0026quot;\nLorem ipsum dolor sit amet, qui minim labore adipisicing minim sint cillum sint consectetur cupidatat. $$\\LaTeX$$","title":"Contact Me"}]